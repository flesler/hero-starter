const a=["North","South","East","West"],b="Stay",c="HealthWell",d="DiamondMine",e="Impassable",f="Unoccupied",g="Hero",h="_",i=100,j=20,k=30,l=20,m=40,n=30;let o,p,q,r;function s(a){return Array.prototype.concat.apply([],a)}function t(a){switch(typeof a){case"object":return b=>b===a;case"string":return b=>b.type===a;case"function":return a;}}function u(a,b){return b=t(b),a.reduce((a,c)=>a+(b(c)||0),0)}function v(a,b){return b=t(b),u(a,a=>b(a)?1:0)}function w(a){return a.sort(()=>Math.random()-.5)}function x(a,c=q){return a===c?{direction:b,distance:0}:p.findNearestObjectDirectionAndDistance(o.board,c,t(a))}function z(a,b=q){const c=x(a,b);return c?c.distance:1/0}function y(b){return w(a).map(a=>p.getTileNearby(o.board,b.y,b.x,a)).filter(a=>!!a)}function A(a,b=q){return v(y(b),a)}function B(a,b=q){return 0<A(a,b)}function C(a=q){return B(c,a)}function D(a,b){return a.walkable&&a.nextToHero&&B(b,a)}function E(a=q){return 1<A(M,a)}function F(a=q){const b="number"==typeof a?a:a.health;return Math.ceil(b/k)}function G(a){for(const b of y(a))b.type===f&&(b.type=h)}function H(){return r.filter(a=>a.type===h)}function I(){r.filter(M).forEach(G);const a=x(c),b=x(a=>a.nextToHero&&a.type===f);H().forEach(G);const d=x(c),e=x(a=>a.nextToHero&&a.type===f);for(const a of H())a.type===h&&(a.type=f);return d||a||e||b||x(c)}function J(a){return a.type===d&&(!a.owner||a.owner.enemy)}function K(a,b=q){var c=Math.abs;return 1===c(a.x-b.x)&&1===c(a.y-b.y)}function L(){return 1===o.healthWells.length}function M(a){return a.enemy}function N(){r=s(o.board.tiles);for(const a of r)a.x=a.distanceFromLeft,a.y=a.distanceFromTop,a.name===o.activeHero.name&&(o.activeHero=a,q=a);for(const a of r){const{x:b,y:c,type:d}=a;a.pos=`(${b}, ${c})`,a.soul=/Fainted/.test(a.subType),a.distanceToHero=z(a),a.nextToHero=1===a.distanceToHero,a.walkable=d===f||a===q||!!a.dead,d===g&&(a.damaged=i-a.health,a.ally=a!==q&&a.team===q.team,a.enemy=a.team!==q.team),delete a.direction}}const O=[a=>a.enemy&&a.nextToHero&&a.health<=k&&a.health>j,a=>a.enemy&&a.nextToHero&&a.health<=k,a=>D(a,a=>a.enemy&&a.health<=j),a=>E()&&D(a,c),a=>a.type===c&&a.nextToHero&&q.damaged>=n,()=>E()&&I(),a=>a.enemy&&a.nextToHero&&(!C(a)||C())&&z(c)-1>=q.health/j,a=>a.enemy&&a.nextToHero&&(!C(a)||C())&&F()>=F(a),a=>a.enemy&&a.nextToHero&&q.damaged&&I(),a=>L()&&q.damaged&&D(a,c),a=>L()&&a.ally&&a.nextToHero&&!!a.damaged,()=>L()&&(q.damaged||!C())&&I(),a=>!E(a)&&D(a,b=>b.enemy&&(!C(b)||C(a))&&F()>F(b.health-j)),()=>q.health>l&&(!C()||!q.damaged)&&z(M)===1/0&&x(J),()=>.6>=q.health/i&&I(),a=>a.nextToHero&&J(a)&&C(),a=>a.ally&&a.nextToHero&&!!a.damaged,a=>a.ally&&a.damaged>=k&&B(M,a),a=>a.ally&&a.damaged>=m&&!K(a),a=>a.enemy&&!C(a)&&F()>F(a.health-j)&&2!==a.distanceToHero,a=>a.enemy&&!C(a)&&F(q.health-j)>=F(a),a=>D(a,a=>a.enemy&&B(a=>a.ally,a)),()=>q.damaged>l&&I(),()=>q.damaged&&x(c),a=>a.ally&&a.damaged&&!K(a),a=>a.soul&&a.nextToHero];module.exports=(a,c)=>{o=a,p=c,N(),q.plan=null;const d=[];for(const b of r){if(b===q||b.type===e||b.distanceToHero===1/0)continue;const a=b.distanceToHero;d[a]?d[a].push(b):d[a]=[b]}for(const b of d)if(b)for(const a of O)for(const c of b){let b=a(c);if(b){if(q.plan=a,!0===b&&(b=c),b&&b.type){if(b.direction||(b=x(b)),!b)continue;q.destination=b}if(b&&b.direction&&(b=b.direction),"string"==typeof b)return b;if(!a.length)break}}return b};